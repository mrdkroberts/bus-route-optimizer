import streamlit as st
import pandas as pd
from geopy.geocoders import Nominatim
from geopy.distance import geodesic
import networkx as nx
import folium
from streamlit_folium import st_folium
from fpdf import FPDF
import io

# --- Title ---
st.title("School Bus Route Optimizer 🚍")

# --- Inputs ---
school_address = st.text_input("Enter School Address")
uploaded_file = st.file_uploader("Upload CSV (name, stop_address)", type="csv")

if uploaded_file and school_address:
    # Load CSV
    df = pd.read_csv(uploaded_file)
    
    # Geocode function
    geolocator = Nominatim(user_agent="bus_route_app")
    def get_coords(address):
        location = geolocator.geocode(address)
        if location:
            return (location.latitude, location.longitude)
        else:
            st.error(f"Could not geocode address: {address}")
            return None

    # Geocode school
    school_coords = get_coords(school_address)

    # Get unique stops
    stops = df[['stop_address']].drop_duplicates().reset_index(drop=True)
    stops['coords'] = stops['stop_address'].apply(get_coords)
    stops = stops.dropna(subset=['coords'])

    # Build graph for TSP
    coords_dict = {'School': school_coords}
    for _, row in stops.iterrows():
        coords_dict[row['stop_address']] = row['coords']

    G = nx.complete_graph(len(coords_dict))
    mapping = {i: list(coords_dict.keys())[i] for i in range(len(coords_dict))}
    G = nx.relabel_nodes(G, mapping)

    for a in coords_dict:
        for b in coords_dict:
            if a != b:
                dist = geodesic(coords_dict[a], coords_dict[b]).miles
                G[a][b]['weight'] = dist

    route = nx.approximation.traveling_salesman_problem(G, weight='weight', cycle=False)

    # Route stops table
    route_stops = []
    for stop in route:
        if stop == 'School':
            continue
        student_list = df[df['stop_address'] == stop]['name'].tolist()
        route_stops.append({
            'Stop Address': stop,
            'Students': ", ".join(student_list)
        })

    # Step-by-step directions
    driver_steps = []
    for i in range(len(route) - 1):
        from_stop = route[i]
        to_stop = route[i+1]
        dist = geodesic(coords_dict[from_stop], coords_dict[to_stop]).miles
        driver_steps.append({
            "From": from_stop,
            "To": to_stop,
            "Distance (miles)": round(dist, 2)
        })

    # --- Display ---
    st.subheader("Optimized Route Order")
    st.table(pd.DataFrame(route_stops))

    st.subheader("Step-by-step Driver Sheet")
    st.table(pd.DataFrame(driver_steps))

    # --- Map ---
    m = folium.Map(location=school_coords, zoom_start=12)
    folium.Marker(school_coords, popup="School", icon=folium.Icon(color="green")).add_to(m)
    for i, stop in enumerate(route):
        if stop != 'School':
            folium.Marker(coords_dict[stop], popup=f"{i}. {stop}", 
                          icon=folium.Icon(color="blue")).add_to(m)
    folium.PolyLine([coords_dict[stop] for stop in route], color="red").add_to(m)
    st.subheader("Route Map")
    st_folium(m, width=700, height=500)

    # --- PDF Download ---
    def create_pdf(route_stops, driver_steps):
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=14)
        pdf.cell(200, 10, "School Bus Driver Sheet", ln=True, align='C')
        
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, "Route Order:", ln=True)
        for stop in route_stops:
            pdf.multi_cell(0, 8, f"{stop['Stop Address']} - {stop['Students']}")
        
        pdf.ln(5)
        pdf.cell(200, 10, "Step-by-step Directions:", ln=True)
        for step in driver_steps:
            pdf.cell(0, 8, f"{step['From']} -> {step['To']} ({step['Distance (miles)']} miles)", ln=True)
        
        return pdf.output(dest='S').encode('latin1')

    pdf_data = create_pdf(route_stops, driver_steps)
    st.download_button("Download PDF Driver Sheet", data=pdf_data, file_name="bus_driver_sheet.pdf", mime="application/pdf")

    # --- Excel Download ---
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        pd.DataFrame(route_stops).to_excel(writer, index=False, sheet_name='Route Order')
        pd.DataFrame(driver_steps).to_excel(writer, index=False, sheet_name='Step-by-Step')
    st.download_button("Download Excel", data=output.getvalue(), file_name="bus_route.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
